Elm.Html = Elm.Html || {};
Elm.Html.Widgets = Elm.Html.Widgets || {};
Elm.Html.Widgets.make = function (_elm) {
   "use strict";
   _elm.Html = _elm.Html || {};
   _elm.Html.Widgets = _elm.Html.Widgets || {};
   if (_elm.Html.Widgets.values)
   return _elm.Html.Widgets.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Html.Widgets",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Svg = Elm.Svg.make(_elm),
   $Svg$Attributes = Elm.Svg.Attributes.make(_elm);
   var knobLabel = F7(function (properties,
   style,
   range,
   valuePerDivision,
   _v0,
   divisionIndex,
   angle) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var currentRangeValue = valuePerDivision * divisionIndex;
                 return A2($Svg.text$,
                 _L.fromArray([$Svg$Attributes.transform(A2($Basics._op["++"],
                              "rotate(",
                              A2($Basics._op["++"],
                              $Basics.toString(currentRangeValue + $Basics.round(properties.rangeAngleMin)),
                              A2($Basics._op["++"],
                              " ",
                              A2($Basics._op["++"],
                              $Basics.toString(_v0._0),
                              A2($Basics._op["++"],
                              ",",
                              A2($Basics._op["++"],
                              $Basics.toString(_v0._1),
                              ")")))))))
                              ,$Svg$Attributes.x($Basics.toString(_v0._0 + 140))
                              ,$Svg$Attributes.y($Basics.toString(_v0._1))]),
                 _L.fromArray([$Svg.text($Basics.toString(currentRangeValue))]));
              }();}
         _U.badCase($moduleName,
         "between lines 477 and 481");
      }();
   });
   var knobLabels = F5(function (properties,
   style,
   range,
   angleList,
   _v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return function () {
                 var divisions = $List.length(angleList);
                 var valuePerDivision = $Basics.round(range) / divisions | 0;
                 return A2($Svg.g,
                 _L.fromArray([]),
                 A3($List.map2,
                 A5(knobLabel,
                 properties,
                 style,
                 range,
                 valuePerDivision,
                 {ctor: "_Tuple2"
                 ,_0: _v4._0
                 ,_1: _v4._1}),
                 _L.range(0,divisions + 1),
                 angleList));
              }();}
         _U.badCase($moduleName,
         "between lines 470 and 472");
      }();
   });
   var knobSegment = F6(function (properties,
   style,
   innerRadius,
   outerRadius,
   _v8,
   angle) {
      return function () {
         switch (_v8.ctor)
         {case "_Tuple2":
            return function () {
                 var indexedAngle = (angle + properties.rangeAngleMin) * ($Basics.pi / 180);
                 var $ = $Basics.fromPolar({ctor: "_Tuple2"
                                           ,_0: innerRadius
                                           ,_1: indexedAngle}),
                 x1$ = $._0,
                 y1$ = $._1;
                 var $ = $Basics.fromPolar({ctor: "_Tuple2"
                                           ,_0: outerRadius
                                           ,_1: indexedAngle}),
                 x2$ = $._0,
                 y2$ = $._1;
                 return A2($Svg.g,
                 _L.fromArray([]),
                 _L.fromArray([A2($Svg.line,
                 _L.fromArray([$Svg$Attributes.x1($Basics.toString(x1$ + _v8._0))
                              ,$Svg$Attributes.y1($Basics.toString(y1$ + _v8._1))
                              ,$Svg$Attributes.x2($Basics.toString(x2$ + _v8._0))
                              ,$Svg$Attributes.y2($Basics.toString(y2$ + _v8._1))
                              ,$Svg$Attributes.$class($Basics.toString(angle))
                              ,$Svg$Attributes.style(A2($Basics._op["++"],
                              "stroke:",
                              A2($Basics._op["++"],
                              style.segmentColor,
                              ";stroke-width:2")))]),
                 _L.fromArray([]))]));
              }();}
         _U.badCase($moduleName,
         "between lines 458 and 466");
      }();
   });
   var knobSegmentWithLabel = F7(function (properties,
   style,
   innerRadius,
   outerRadius,
   _v12,
   angle,
   labelValue) {
      return function () {
         switch (_v12.ctor)
         {case "_Tuple2":
            return function () {
                 var piAngle = (angle + properties.rangeAngleMin) * ($Basics.pi / 180);
                 var $ = $Basics.fromPolar({ctor: "_Tuple2"
                                           ,_0: innerRadius
                                           ,_1: piAngle}),
                 x1$ = $._0,
                 y1$ = $._1;
                 var $ = $Basics.fromPolar({ctor: "_Tuple2"
                                           ,_0: outerRadius
                                           ,_1: piAngle}),
                 x2$ = $._0,
                 y2$ = $._1;
                 var labelRadius = outerRadius + 10;
                 var $ = $Basics.fromPolar({ctor: "_Tuple2"
                                           ,_0: labelRadius
                                           ,_1: piAngle}),
                 x3$ = $._0,
                 y3$ = $._1;
                 return A2($Svg.g,
                 _L.fromArray([]),
                 _L.fromArray([A2($Svg.line,
                              _L.fromArray([$Svg$Attributes.x1($Basics.toString(x1$ + _v12._0))
                                           ,$Svg$Attributes.y1($Basics.toString(y1$ + _v12._1))
                                           ,$Svg$Attributes.x2($Basics.toString(x2$ + _v12._0))
                                           ,$Svg$Attributes.y2($Basics.toString(y2$ + _v12._1))
                                           ,$Svg$Attributes.$class($Basics.toString(piAngle))
                                           ,$Svg$Attributes.style(A2($Basics._op["++"],
                                           "stroke:",
                                           A2($Basics._op["++"],
                                           style.segmentColor,
                                           ";stroke-width:2")))]),
                              _L.fromArray([]))
                              ,A2($Svg.text$,
                              _L.fromArray([$Svg$Attributes.x($Basics.toString(x3$ + _v12._0))
                                           ,$Svg$Attributes.y($Basics.toString(y3$ + _v12._1 + 4))
                                           ,$Svg$Attributes.textAnchor("middle")]),
                              _L.fromArray([$Svg.text($Basics.toString(labelValue))]))]));
              }();}
         _U.badCase($moduleName,
         "between lines 427 and 448");
      }();
   });
   var knobHandle = F4(function (properties,
   style,
   range,
   _v16) {
      return function () {
         switch (_v16.ctor)
         {case "_Tuple2":
            return function () {
                 var currentValuePercentage = $Basics.toFloat(properties.value) / $Basics.toFloat(properties.maxValue);
                 var currentRangeValue = _U.cmp(properties.rangeAngleMin,
                 properties.rangeAngleMax) > -1 ? A3($Basics.clamp,
                 properties.rangeAngleMin,
                 360 + properties.rangeAngleMax,
                 currentValuePercentage * range + properties.rangeAngleMin) : A3($Basics.clamp,
                 properties.rangeAngleMin,
                 properties.rangeAngleMax,
                 currentValuePercentage * range + properties.rangeAngleMin);
                 return A2($Svg.g,
                 _L.fromArray([$Svg$Attributes.transform(A2($Basics._op["++"],
                 "rotate(",
                 A2($Basics._op["++"],
                 $Basics.toString(currentRangeValue),
                 A2($Basics._op["++"],
                 " ",
                 A2($Basics._op["++"],
                 $Basics.toString(_v16._0),
                 A2($Basics._op["++"],
                 ",",
                 A2($Basics._op["++"],
                 $Basics.toString(_v16._1),
                 ")")))))))]),
                 _L.fromArray([A2($Svg.circle,
                              _L.fromArray([$Svg$Attributes.cx($Basics.toString(_v16._0))
                                           ,$Svg$Attributes.cy($Basics.toString(_v16._1))
                                           ,$Svg$Attributes.r("112")
                                           ,$Svg$Attributes.fill(style.knobColor)]),
                              _L.fromArray([]))
                              ,A2($Svg.circle,
                              _L.fromArray([$Svg$Attributes.cx($Basics.toString(_v16._0 + 90))
                                           ,$Svg$Attributes.cy($Basics.toString(_v16._1))
                                           ,$Svg$Attributes.r("10")
                                           ,$Svg$Attributes.fill(style.knobPointerColor)]),
                              _L.fromArray([]))]));
              }();}
         _U.badCase($moduleName,
         "between lines 406 and 412");
      }();
   });
   var knob = F2(function (properties,
   style) {
      return function () {
         var range = _U.cmp(properties.rangeAngleMin,
         properties.rangeAngleMax) > -1 ? 360 - properties.rangeAngleMin + properties.rangeAngleMax : properties.rangeAngleMax - properties.rangeAngleMin;
         var smallSegments = properties.smallSegments;
         var segments = properties.segments;
         var barAngle = range / $Basics.toFloat(segments);
         var barAngles = A2($List.map,
         function (a) {
            return $Basics.toFloat(a) * barAngle;
         },
         _L.range(0,
         properties.segments));
         var smallBarAngle = range / $Basics.toFloat(segments + smallSegments);
         var barSmallAngles = A2($List.map,
         function (a) {
            return $Basics.toFloat(a) * smallBarAngle;
         },
         _L.range(0,
         properties.smallSegments + properties.segments));
         var labelValuePerUnit = $Basics.toFloat(properties.maxValue) / $Basics.toFloat(segments);
         var labelValues = A2($List.map,
         function (s) {
            return $Basics.round($Basics.toFloat(s) * labelValuePerUnit);
         },
         _L.range(0,segments));
         var centerY = 340 / 2;
         var centerX = 340 / 2;
         var smallBarHeight = 7;
         var barHeight = 15;
         var radius = 120;
         var middleRadius = radius + smallBarHeight;
         var largeRadius = radius + barHeight;
         var containerHeight = 340;
         var containerWidth = 340;
         return A2($Svg.svg,
         _L.fromArray([$Svg$Attributes.version("1.1")
                      ,$Svg$Attributes.$class($Basics.toString(range))
                      ,$Svg$Attributes.height("100%")
                      ,$Svg$Attributes.width("100%")
                      ,$Svg$Attributes.x("0")
                      ,$Svg$Attributes.y("0")
                      ,$Svg$Attributes.viewBox(A2($Basics._op["++"],
                      "0 0 ",
                      A2($Basics._op["++"],
                      $Basics.toString(containerWidth),
                      A2($Basics._op["++"],
                      " ",
                      $Basics.toString(containerHeight)))))]),
         A2($Basics._op["++"],
         A3($List.map2,
         A5(knobSegmentWithLabel,
         properties,
         style,
         radius,
         largeRadius,
         {ctor: "_Tuple2"
         ,_0: centerX
         ,_1: centerY}),
         barAngles,
         labelValues),
         A2($Basics._op["++"],
         A2($List.map,
         A5(knobSegment,
         properties,
         style,
         radius,
         middleRadius,
         {ctor: "_Tuple2"
         ,_0: centerX
         ,_1: centerY}),
         barSmallAngles),
         _L.fromArray([A4(knobHandle,
         properties,
         style,
         range,
         {ctor: "_Tuple2"
         ,_0: centerX
         ,_1: centerY})]))));
      }();
   });
   var simulatedAnalogMeterPointer = F2(function (properties,
   style) {
      return function () {
         var percentage = A3($Basics.clamp,
         -50,
         50,
         $Basics.toFloat(properties.currentValue) / $Basics.toFloat(properties.maxValue) * 100 - 50);
         return A2($Svg.g,
         _L.fromArray([$Svg$Attributes.transform(A2($Basics._op["++"],
         "rotate(",
         A2($Basics._op["++"],
         $Basics.toString(percentage),
         " 204,300)")))]),
         _L.fromArray([A2($Svg.polygon,
         _L.fromArray([$Svg$Attributes.points("199,300 203,62 205,62 209,300")
                      ,$Svg$Attributes.fill(style.foreColor)]),
         _L.fromArray([]))]));
      }();
   });
   var simulatedAnalogMeterSmallBar = F6(function (x$,
   y$,
   rotation,
   percentage,
   properties,
   style) {
      return function () {
         var valueToCheck = percentage * $Basics.toFloat(properties.maxValue);
         var ranges = properties.ranges;
         var getRange = A2($List.filter,
         function (r) {
            return _U.cmp(r.minValue,
            valueToCheck) < 1 && _U.cmp(valueToCheck,
            r.maxValue) < 1;
         },
         ranges);
         var rangeFound = A2($List.take,
         1,
         getRange);
         var foreColor = function () {
            switch (rangeFound.ctor)
            {case "::":
               switch (rangeFound._1.ctor)
                 {case "[]":
                    return _U.cmp($Basics.toFloat(properties.currentValue),
                      valueToCheck) < 1 ? style.foreColor : rangeFound._0.color;}
                 break;}
            return style.foreColor;
         }();
         var width$ = 6;
         var height$ = 10;
         return A2($Svg.rect,
         _L.fromArray([$Svg$Attributes.x($Basics.toString(x$))
                      ,$Svg$Attributes.y($Basics.toString(y$))
                      ,$Svg$Attributes.fill(foreColor)
                      ,$Svg$Attributes.width($Basics.toString(width$))
                      ,$Svg$Attributes.height($Basics.toString(height$))
                      ,$Svg$Attributes.transform(A2($Basics._op["++"],
                      "rotate(",
                      A2($Basics._op["++"],
                      $Basics.toString(rotation),
                      A2($Basics._op["++"],
                      " ",
                      A2($Basics._op["++"],
                      $Basics.toString(x$ + (width$ - 10) / 2),
                      A2($Basics._op["++"],
                      ",",
                      A2($Basics._op["++"],
                      $Basics.toString(y$ + height$ / 2),
                      ")")))))))]),
         _L.fromArray([]));
      }();
   });
   var simulatedAnalogMeterBar = F6(function (x$,
   y$,
   rotation,
   percentage,
   properties,
   style) {
      return function () {
         var valueToCheck = percentage * $Basics.toFloat(properties.maxValue);
         var ranges = properties.ranges;
         var getRange = A2($List.filter,
         function (r) {
            return _U.cmp(r.minValue,
            valueToCheck) < 1 && _U.cmp(valueToCheck,
            r.maxValue) < 1;
         },
         ranges);
         var rangeFound = A2($List.take,
         1,
         getRange);
         var foreColor = function () {
            switch (rangeFound.ctor)
            {case "::":
               switch (rangeFound._1.ctor)
                 {case "[]":
                    return _U.cmp($Basics.toFloat(properties.currentValue),
                      valueToCheck) < 1 ? style.foreColor : rangeFound._0.color;}
                 break;}
            return style.foreColor;
         }();
         var width$ = 8;
         var height$ = 20;
         return A2($Svg.rect,
         _L.fromArray([$Svg$Attributes.x($Basics.toString(x$))
                      ,$Svg$Attributes.y($Basics.toString(y$))
                      ,$Svg$Attributes.fill(foreColor)
                      ,$Svg$Attributes.width($Basics.toString(width$))
                      ,$Svg$Attributes.height($Basics.toString(height$))
                      ,$Svg$Attributes.transform(A2($Basics._op["++"],
                      "rotate(",
                      A2($Basics._op["++"],
                      $Basics.toString(rotation),
                      A2($Basics._op["++"],
                      " ",
                      A2($Basics._op["++"],
                      $Basics.toString(x$ + (width$ - 10) / 2),
                      A2($Basics._op["++"],
                      ",",
                      A2($Basics._op["++"],
                      $Basics.toString(y$ + height$ / 2),
                      ")")))))))]),
         _L.fromArray([]));
      }();
   });
   var simulatedAnalogMeterLabel = F7(function (x$,
   y$,
   rotation,
   percentage,
   labelPercentage,
   properties,
   style) {
      return function () {
         var labelPercentageValue = labelPercentage * $Basics.toFloat(properties.maxValue);
         var valueToCheck = percentage * $Basics.toFloat(properties.maxValue);
         var ranges = properties.ranges;
         var getRange = A2($List.filter,
         function (r) {
            return _U.cmp(r.minValue,
            valueToCheck) < 1 && _U.cmp(valueToCheck,
            r.maxValue) < 1;
         },
         ranges);
         var rangeFound = A2($List.take,
         1,
         getRange);
         var foreColor = function () {
            switch (rangeFound.ctor)
            {case "::":
               switch (rangeFound._1.ctor)
                 {case "[]":
                    return _U.cmp($Basics.toFloat(properties.currentValue),
                      valueToCheck) < 1 ? style.foreColor : rangeFound._0.color;}
                 break;}
            return style.foreColor;
         }();
         return A2($Svg.text$,
         _L.fromArray([$Svg$Attributes.x($Basics.toString(x$))
                      ,$Svg$Attributes.y($Basics.toString(y$))
                      ,$Svg$Attributes.fill(foreColor)
                      ,$Svg$Attributes.$class($Basics.toString(properties.currentValue))
                      ,$Svg$Attributes.textAnchor("middle")
                      ,$Svg$Attributes.transform(A2($Basics._op["++"],
                      "rotate(",
                      A2($Basics._op["++"],
                      $Basics.toString(rotation),
                      A2($Basics._op["++"],
                      " ",
                      A2($Basics._op["++"],
                      $Basics.toString(x$),
                      A2($Basics._op["++"],
                      ",",
                      A2($Basics._op["++"],
                      $Basics.toString(y$),
                      ")")))))))]),
         _L.fromArray([$Svg.text($Basics.toString(labelPercentageValue))]));
      }();
   });
   var simulatedAnalogMeterLabels = F2(function (properties,
   style) {
      return A2($Svg.g,
      _L.fromArray([]),
      _L.fromArray([A7(simulatedAnalogMeterLabel,
                   -10,
                   110,
                   -45,
                   0,
                   0,
                   properties,
                   style)
                   ,A7(simulatedAnalogMeterLabel,
                   97,
                   47,
                   -24,
                   0.244,
                   0.25,
                   properties,
                   style)
                   ,A7(simulatedAnalogMeterLabel,
                   202,
                   30,
                   0,
                   0.49,
                   0.5,
                   properties,
                   style)
                   ,A7(simulatedAnalogMeterLabel,
                   312,
                   51,
                   24,
                   0.749,
                   0.75,
                   properties,
                   style)
                   ,A7(simulatedAnalogMeterLabel,
                   416,
                   114,
                   45,
                   0.99,
                   1,
                   properties,
                   style)]));
   });
   var simulatedAnalogMeterBars = F2(function (properties,
   style) {
      return A2($Svg.g,
      _L.fromArray([]),
      _L.fromArray([A6(simulatedAnalogMeterBar,
                   0.0,
                   114,
                   -45,
                   0,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   25,
                   97,
                   -37,
                   6.2e-2,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   50,
                   79,
                   -34,
                   0.125,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   75,
                   67,
                   -30,
                   0.187,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterBar,
                   100,
                   54,
                   -24,
                   0.249,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   125,
                   50,
                   -18,
                   0.312,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   150,
                   45,
                   -11,
                   0.375,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   175,
                   42,
                   -6,
                   0.437,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterBar,
                   200,
                   38,
                   0,
                   0.499,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   225,
                   42,
                   6,
                   0.562,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   250,
                   45,
                   11,
                   0.625,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   275,
                   50,
                   18,
                   0.687,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterBar,
                   300,
                   54,
                   24,
                   0.75,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   325,
                   67,
                   30,
                   0.812,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   350,
                   79,
                   34,
                   0.875,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterSmallBar,
                   375,
                   97,
                   37,
                   0.937,
                   properties,
                   style)
                   ,A6(simulatedAnalogMeterBar,
                   400,
                   114,
                   45,
                   0.999,
                   properties,
                   style)]));
   });
   var simulatedAnalogMeter = F2(function (properties,
   style$) {
      return function () {
         var containerHeight = 200;
         var containerWidth = 400;
         return A2($Svg.svg,
         _L.fromArray([$Svg$Attributes.style("background:#000")
                      ,$Svg$Attributes.version("1.1")
                      ,$Svg$Attributes.height("100%")
                      ,$Svg$Attributes.width("100%")
                      ,$Svg$Attributes.x("0")
                      ,$Svg$Attributes.y("0")
                      ,$Svg$Attributes.viewBox(A2($Basics._op["++"],
                      "0 0 ",
                      A2($Basics._op["++"],
                      $Basics.toString(containerWidth),
                      A2($Basics._op["++"],
                      " ",
                      $Basics.toString(containerHeight)))))]),
         _L.fromArray([A2($Svg.rect,
                      _L.fromArray([$Svg$Attributes.fill(style$.backgroundColor)
                                   ,$Svg$Attributes.x("2")
                                   ,$Svg$Attributes.width($Basics.toString(containerWidth))
                                   ,$Svg$Attributes.height($Basics.toString(containerHeight))]),
                      _L.fromArray([]))
                      ,A2(simulatedAnalogMeterBars,
                      properties,
                      style$)
                      ,A2(simulatedAnalogMeterLabels,
                      properties,
                      style$)
                      ,A2(simulatedAnalogMeterPointer,
                      properties,
                      style$)]));
      }();
   });
   var segmentedBarGraphBar = F4(function (_v29,
   properties,
   style,
   index) {
      return function () {
         switch (_v29.ctor)
         {case "_Tuple2":
            return function () {
                 var ranges = properties.ranges;
                 var barValue = $Basics.toFloat(index) / $Basics.toFloat(properties.segments) * $Basics.toFloat(properties.maxValue);
                 var getRange = A2($List.filter,
                 function (r) {
                    return _U.cmp(r.minValue,
                    barValue) < 1 && _U.cmp(barValue,
                    r.maxValue) < 1;
                 },
                 ranges);
                 var rangeFound = A2($List.take,
                 1,
                 getRange);
                 var barColor = function () {
                    switch (rangeFound.ctor)
                    {case "::":
                       switch (rangeFound._1.ctor)
                         {case "[]":
                            return _U.cmp($Basics.toFloat(properties.currentValue),
                              barValue) < 1 ? style.emptyColor : rangeFound._0.color;}
                         break;}
                    return style.emptyColor;
                 }();
                 var transformAttribute = $Svg$Attributes.transform(A2($Basics._op["++"],
                 "translate(",
                 A2($Basics._op["++"],
                 $Basics.toString(_v29._0 * index + 4),
                 " 8)")));
                 return A2($Svg.rect,
                 A2($Basics._op["++"],
                 _L.fromArray([transformAttribute]),
                 _L.fromArray([$Svg$Attributes.$class($Basics.toString(barValue))
                              ,$Svg$Attributes.fill(barColor)
                              ,$Svg$Attributes.width($Basics.toString(_v29._0 - 8))
                              ,$Svg$Attributes.height($Basics.toString(_v29._1 - 16))])),
                 _L.fromArray([]));
              }();}
         _U.badCase($moduleName,
         "between lines 221 and 229");
      }();
   });
   var segmentedBarGraph = F2(function (properties,
   style) {
      return function () {
         var containerHeight = 340;
         var barWidth = 100;
         return A2($Svg.svg,
         _L.fromArray([$Svg$Attributes.version("1.1")
                      ,$Svg$Attributes.height("100%")
                      ,$Svg$Attributes.width("100%")
                      ,$Svg$Attributes.x("0")
                      ,$Svg$Attributes.y("0")
                      ,$Svg$Attributes.viewBox(A2($Basics._op["++"],
                      "0 0 ",
                      A2($Basics._op["++"],
                      $Basics.toString(barWidth * properties.segments),
                      A2($Basics._op["++"],
                      " ",
                      $Basics.toString(containerHeight)))))]),
         A2($Basics._op["++"],
         _L.fromArray([A2($Svg.rect,
         _L.fromArray([$Svg$Attributes.fill(style.backgroundColor)
                      ,$Svg$Attributes.width("100%")
                      ,$Svg$Attributes.height("340")]),
         _L.fromArray([]))]),
         A2($List.map,
         A3(segmentedBarGraphBar,
         {ctor: "_Tuple2"
         ,_0: barWidth
         ,_1: containerHeight},
         properties,
         style),
         _L.range(0,
         properties.segments - 1))));
      }();
   });
   var seventSegmentColon = F3(function (style,
   containerWidth,
   index) {
      return A2($Svg.g,
      _L.fromArray([]),
      _L.fromArray([A2($Svg.circle,
                   _L.fromArray([$Svg$Attributes.cx($Basics.toString((index + 1) * containerWidth))
                                ,$Svg$Attributes.cy("110")
                                ,$Svg$Attributes.r("16")
                                ,$Svg$Attributes.fill(style.textColor)]),
                   _L.fromArray([]))
                   ,A2($Svg.circle,
                   _L.fromArray([$Svg$Attributes.cx($Basics.toString((index + 1) * containerWidth))
                                ,$Svg$Attributes.cy("230")
                                ,$Svg$Attributes.r("16")
                                ,$Svg$Attributes.fill(style.textColor)]),
                   _L.fromArray([]))]));
   });
   var seventSegmentColons = F3(function (style,
   _v36,
   indexes) {
      return function () {
         switch (_v36.ctor)
         {case "_Tuple2":
            return A2($List.map,
              A2(seventSegmentColon,
              style,
              _v36._0),
              indexes);}
         _U.badCase($moduleName,
         "on line 194, column 3 to 52");
      }();
   });
   var sevenSegmentPoint = F3(function (style,
   containerWidth,
   index) {
      return A2($Svg.g,
      _L.fromArray([]),
      _L.fromArray([A2($Svg.circle,
      _L.fromArray([$Svg$Attributes.cx($Basics.toString((index + 1) * containerWidth))
                   ,$Svg$Attributes.cy("300")
                   ,$Svg$Attributes.r("16")
                   ,$Svg$Attributes.fill(style.textColor)]),
      _L.fromArray([]))]));
   });
   var sevenSegmentPoints = F3(function (style,
   _v40,
   indexes) {
      return function () {
         switch (_v40.ctor)
         {case "_Tuple2":
            return A2($List.map,
              A2(sevenSegmentPoint,
              style,
              _v40._0),
              indexes);}
         _U.badCase($moduleName,
         "on line 183, column 3 to 51");
      }();
   });
   var sevenSegmentDigitPolygon = F5(function (properties,
   style,
   points$,
   attributes,
   isOn) {
      return function () {
         var element = isOn ? A2($Svg.polygon,
         A2($Basics._op["++"],
         _L.fromArray([$Svg$Attributes.points(points$)
                      ,$Svg$Attributes.fill(style.textColor)]),
         attributes),
         _L.fromArray([])) : properties.isDimmedWhenOff ? A2($Svg.g,
         _L.fromArray([]),
         _L.fromArray([A2($Svg.polygon,
                      A2($Basics._op["++"],
                      _L.fromArray([$Svg$Attributes.points(points$)
                                   ,$Svg$Attributes.fill(style.textColor)]),
                      attributes),
                      _L.fromArray([]))
                      ,A2($Svg.polygon,
                      A2($Basics._op["++"],
                      _L.fromArray([$Svg$Attributes.points(points$)
                                   ,$Svg$Attributes.fill("#000")
                                   ,$Svg$Attributes.opacity("0.8")]),
                      attributes),
                      _L.fromArray([]))])) : A2($Svg.g,
         _L.fromArray([]),
         _L.fromArray([]));
         return element;
      }();
   });
   var sevenSegmentDigit = F5(function (properties,
   style,
   _v44,
   index,
   digit) {
      return function () {
         switch (_v44.ctor)
         {case "_Tuple2":
            return function () {
                 var transformAttribute = $Svg$Attributes.transform(A2($Basics._op["++"],
                 "translate(",
                 A2($Basics._op["++"],
                 $Basics.toString(_v44._0 * index),
                 " 0)")));
                 var newForegroundAttribute = _L.fromArray([transformAttribute]);
                 var segmentA = function (isOn) {
                    return A5(sevenSegmentDigitPolygon,
                    properties,
                    style,
                    " 39.6,  35.4   52.5,  22.1  145.0,  22.1  157.0,  35.4  145.0,  48.2   52.5,  48.2",
                    newForegroundAttribute,
                    isOn);
                 };
                 var segmentB = function (isOn) {
                    return A5(sevenSegmentDigitPolygon,
                    properties,
                    style,
                    "151.4,  53.1  164.3,  41.8  175.5,  53.1  175.5, 150.8  163.5, 163.2  151.4, 151.2",
                    newForegroundAttribute,
                    isOn);
                 };
                 var segmentC = function (isOn) {
                    return A5(sevenSegmentDigitPolygon,
                    properties,
                    style,
                    "163.5, 176.5  175.5, 187.8  175.5, 285.5  163.5, 296.7  151.4, 283.4  151.4, 188.6",
                    newForegroundAttribute,
                    isOn);
                 };
                 var segmentD = function (isOn) {
                    return A5(sevenSegmentDigitPolygon,
                    properties,
                    style,
                    "145.4, 291.1  157.0, 303.9  145.4, 316.0   52.9, 316     40.0, 305.2   52.1, 291.1",
                    newForegroundAttribute,
                    isOn);
                 };
                 var segmentE = function (isOn) {
                    return A5(sevenSegmentDigitPolygon,
                    properties,
                    style,
                    " 45.2, 284.2   33.6, 296.7   22.3, 284.2   22.3, 188.6   33.8, 176.5   45.2, 187.8",
                    newForegroundAttribute,
                    isOn);
                 };
                 var segmentF = function (isOn) {
                    return A5(sevenSegmentDigitPolygon,
                    properties,
                    style,
                    " 33.8, 163.2   22.3, 150.4   22.3,  53.9   33.8,  41.8   45.2,  53.9   47.3, 150  ",
                    newForegroundAttribute,
                    isOn);
                 };
                 var segmentG = function (isOn) {
                    return A5(sevenSegmentDigitPolygon,
                    properties,
                    style,
                    " 39.6, 170     51.7, 156.8  146.2, 156.8  157.0, 170    145.8, 182.9   52.1, 182.9",
                    newForegroundAttribute,
                    isOn);
                 };
                 var segment = F7(function (a,
                 b,
                 c,
                 d,
                 e,
                 f,
                 g) {
                    return _L.fromArray([segmentA(a)
                                        ,segmentB(b)
                                        ,segmentC(c)
                                        ,segmentD(d)
                                        ,segmentE(e)
                                        ,segmentF(f)
                                        ,segmentG(g)]);
                 });
                 var polygons = function () {
                    switch (digit + "")
                    {case " ":
                       return _L.fromArray([]);
                       case "0": return A7(segment,
                         true,
                         true,
                         true,
                         true,
                         true,
                         true,
                         false);
                       case "1": return A7(segment,
                         false,
                         true,
                         true,
                         false,
                         false,
                         false,
                         false);
                       case "2": return A7(segment,
                         true,
                         true,
                         false,
                         true,
                         true,
                         false,
                         true);
                       case "3": return A7(segment,
                         true,
                         true,
                         true,
                         true,
                         false,
                         false,
                         true);
                       case "4": return A7(segment,
                         false,
                         true,
                         true,
                         false,
                         false,
                         true,
                         true);
                       case "5": return A7(segment,
                         true,
                         false,
                         true,
                         true,
                         false,
                         true,
                         true);
                       case "6": return A7(segment,
                         true,
                         false,
                         true,
                         true,
                         true,
                         true,
                         true);
                       case "7": return A7(segment,
                         true,
                         true,
                         true,
                         false,
                         false,
                         false,
                         false);
                       case "8": return A7(segment,
                         true,
                         true,
                         true,
                         true,
                         true,
                         true,
                         true);
                       case "9": return A7(segment,
                         true,
                         true,
                         true,
                         true,
                         false,
                         true,
                         true);}
                    return A7(segment,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false);
                 }();
                 return A2($Svg.g,
                 _L.fromArray([]),
                 polygons);
              }();}
         _U.badCase($moduleName,
         "between lines 138 and 168");
      }();
   });
   var sevenSegment = F2(function (properties,
   style) {
      return function () {
         var digitLength = $String.length(properties.digits);
         var containerHeight = 340;
         var containerWidth = 200;
         return A2($Svg.svg,
         _L.fromArray([$Svg$Attributes.version("1.1")
                      ,$Svg$Attributes.height("100%")
                      ,$Svg$Attributes.width("100%")
                      ,$Svg$Attributes.x("0")
                      ,$Svg$Attributes.y("0")
                      ,$Svg$Attributes.viewBox(A2($Basics._op["++"],
                      "0 0 ",
                      A2($Basics._op["++"],
                      $Basics.toString(containerWidth * digitLength),
                      A2($Basics._op["++"],
                      " ",
                      $Basics.toString(containerHeight)))))]),
         A2($Basics._op["++"],
         _L.fromArray([A2($Svg.rect,
         _L.fromArray([$Svg$Attributes.x("0")
                      ,$Svg$Attributes.y("0")
                      ,$Svg$Attributes.width($Basics.toString(containerWidth * digitLength))
                      ,$Svg$Attributes.height($Basics.toString(containerHeight))
                      ,$Svg$Attributes.fill(style.backgroundColor)]),
         _L.fromArray([]))]),
         A2($Basics._op["++"],
         A2($List.indexedMap,
         A3(sevenSegmentDigit,
         properties,
         style,
         {ctor: "_Tuple2"
         ,_0: containerWidth
         ,_1: containerHeight}),
         $String.toList(properties.digits)),
         A2($Basics._op["++"],
         A3(sevenSegmentPoints,
         style,
         {ctor: "_Tuple2"
         ,_0: containerWidth
         ,_1: containerHeight},
         properties.pointIndexes),
         A3(seventSegmentColons,
         style,
         {ctor: "_Tuple2"
         ,_0: containerWidth
         ,_1: containerHeight},
         properties.colonIndexes)))));
      }();
   });
   var defaultKnobStyle = {_: {}
                          ,knobColor: "#444"
                          ,knobPointerColor: "#F44"
                          ,segmentColor: "#F44"};
   var defaultKnobProperties = {_: {}
                               ,maxValue: 100
                               ,rangeAngleMax: 20
                               ,rangeAngleMin: 160
                               ,segments: 20
                               ,smallSegments: 60
                               ,value: 0};
   var defaultSimulatedAnalogMeterStyle = {_: {}
                                          ,backgroundColor: "#000"
                                          ,foreColor: "#fff"};
   var defaultSegmentBarGraphStyle = {_: {}
                                     ,backgroundColor: "#000"
                                     ,emptyColor: "#444"};
   var defaultMeterRangeAlert = {_: {}
                                ,color: "#F00"
                                ,maxValue: 100
                                ,minValue: 50.0};
   var defaultMeterRangeOk = {_: {}
                             ,color: "#0F0"
                             ,maxValue: 50
                             ,minValue: 0};
   var defaultSimulatedAnalogMeterProperties = {_: {}
                                               ,currentValue: 50
                                               ,maxValue: 100
                                               ,ranges: _L.fromArray([defaultMeterRangeOk
                                                                     ,defaultMeterRangeAlert])};
   var defaultSegmentedBarGraphProperties = {_: {}
                                            ,currentValue: 70
                                            ,maxValue: 100
                                            ,ranges: _L.fromArray([defaultMeterRangeOk
                                                                  ,defaultMeterRangeAlert])
                                            ,segments: 50};
   var defaultSevenSegmentStyle = {_: {}
                                  ,backgroundColor: "#000"
                                  ,textColor: "#0F0"};
   var defaultSevenSegmentProperties = {_: {}
                                       ,colonIndexes: _L.fromArray([1])
                                       ,digits: "1234 4567890"
                                       ,isDimmedWhenOff: true
                                       ,isSlant: false
                                       ,pointIndexes: _L.fromArray([7])};
   var KnobStyle = F3(function (a,
   b,
   c) {
      return {_: {}
             ,knobColor: b
             ,knobPointerColor: c
             ,segmentColor: a};
   });
   var KnobProperties = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,maxValue: b
             ,rangeAngleMax: f
             ,rangeAngleMin: e
             ,segments: c
             ,smallSegments: d
             ,value: a};
   });
   var SimulatedAnalogMeterStyle = F2(function (a,
   b) {
      return {_: {}
             ,backgroundColor: b
             ,foreColor: a};
   });
   var MeterRange = F3(function (a,
   b,
   c) {
      return {_: {}
             ,color: a
             ,maxValue: c
             ,minValue: b};
   });
   var SimulatedAnalogMeterProperties = F3(function (a,
   b,
   c) {
      return {_: {}
             ,currentValue: a
             ,maxValue: b
             ,ranges: c};
   });
   var SegmentedBarGraphStyle = F2(function (a,
   b) {
      return {_: {}
             ,backgroundColor: b
             ,emptyColor: a};
   });
   var SegmentedBarGraphRange = F3(function (a,
   b,
   c) {
      return {_: {}
             ,color: a
             ,maxValue: c
             ,minValue: b};
   });
   var SegmentedBarGraphProperties = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,currentValue: a
             ,maxValue: b
             ,ranges: d
             ,segments: c};
   });
   var SevenSegmentStyle = F2(function (a,
   b) {
      return {_: {}
             ,backgroundColor: a
             ,textColor: b};
   });
   var SevenSegmentProperties = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,colonIndexes: c
             ,digits: a
             ,isDimmedWhenOff: e
             ,isSlant: d
             ,pointIndexes: b};
   });
   _elm.Html.Widgets.values = {_op: _op
                              ,sevenSegment: sevenSegment
                              ,defaultSevenSegmentProperties: defaultSevenSegmentProperties
                              ,defaultSevenSegmentStyle: defaultSevenSegmentStyle
                              ,segmentedBarGraph: segmentedBarGraph
                              ,defaultSegmentedBarGraphProperties: defaultSegmentedBarGraphProperties
                              ,defaultSegmentBarGraphStyle: defaultSegmentBarGraphStyle
                              ,simulatedAnalogMeter: simulatedAnalogMeter
                              ,defaultSimulatedAnalogMeterProperties: defaultSimulatedAnalogMeterProperties
                              ,defaultSimulatedAnalogMeterStyle: defaultSimulatedAnalogMeterStyle
                              ,knob: knob
                              ,defaultKnobProperties: defaultKnobProperties
                              ,defaultKnobStyle: defaultKnobStyle
                              ,SevenSegmentProperties: SevenSegmentProperties
                              ,SevenSegmentStyle: SevenSegmentStyle
                              ,SegmentedBarGraphProperties: SegmentedBarGraphProperties
                              ,SegmentedBarGraphStyle: SegmentedBarGraphStyle
                              ,SimulatedAnalogMeterProperties: SimulatedAnalogMeterProperties
                              ,SimulatedAnalogMeterStyle: SimulatedAnalogMeterStyle
                              ,KnobProperties: KnobProperties
                              ,KnobStyle: KnobStyle};
   return _elm.Html.Widgets.values;
};