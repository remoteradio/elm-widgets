Elm.Example = Elm.Example || {};
Elm.Example.Main = Elm.Example.Main || {};
Elm.Example.Main.make = function (_elm) {
   "use strict";
   _elm.Example = _elm.Example || {};
   _elm.Example.Main = _elm.Example.Main || {};
   if (_elm.Example.Main.values)
   return _elm.Example.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Example.Main",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Widgets = Elm.Html.Widgets.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Window = Elm.Window.make(_elm);
   var convertToInt = function (digit) {
      return A2($Maybe.withDefault,
      0,
      $Result.toMaybe($String.toInt(digit)));
   };
   var knobView = F2(function (address,
   sample) {
      return function () {
         var properties = sample.properties;
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.style(_L.fromArray([sample.isVisible ? {ctor: "_Tuple2"
                                                                               ,_0: ""
                                                                               ,_1: ""} : {ctor: "_Tuple2"
                                                                                          ,_0: "display"
                                                                                          ,_1: "none"}]))]),
         _L.fromArray([A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("KNOB VIEW")]))
                      ,A2($Html.div,
                      _L.fromArray([$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                         ,_0: "width"
                                                                         ,_1: "400px"}
                                                                        ,{ctor: "_Tuple2"
                                                                         ,_0: "height"
                                                                         ,_1: "400px"}]))]),
                      _L.fromArray([A2($Html$Widgets.knob,
                      sample.properties,
                      sample.style)]))]));
      }();
   });
   var update = F2(function (action,
   appState) {
      return function () {
         switch (action.ctor)
         {case "NoOp": return appState;
            case "SegmentedBarGraphValueChange":
            return function () {
                 var segmentedBarGraphSample$ = appState.segmentedBarGraphSample;
                 var properties$ = segmentedBarGraphSample$.properties;
                 return _U.replace([["segmentedBarGraphSample"
                                    ,_U.replace([["properties"
                                                 ,_U.replace([["currentValue"
                                                              ,convertToInt(action._0)]],
                                                 properties$)]],
                                    segmentedBarGraphSample$)]],
                 appState);
              }();
            case "SeventSegmentColonsChange":
            return function () {
                 var convert = function (digit) {
                    return A2($Maybe.withDefault,
                    -1,
                    $Result.toMaybe($String.toInt(digit)));
                 };
                 var colonIndexes$ = A2($List.filter,
                 function (y) {
                    return !_U.eq(y,-1);
                 },
                 A2($List.map,
                 function (x) {
                    return convert(x);
                 },
                 A2($String.split,
                 ",",
                 action._0)));
                 var sevenSegmentSample$ = appState.sevenSegmentSample;
                 var properties$ = sevenSegmentSample$.properties;
                 return _U.replace([["sevenSegmentSample"
                                    ,_U.replace([["properties"
                                                 ,_U.replace([["colonIndexes"
                                                              ,colonIndexes$]],
                                                 properties$)]
                                                ,["colonIndexesText"
                                                 ,action._0]],
                                    sevenSegmentSample$)]],
                 appState);
              }();
            case "SeventSegmentPointsChange":
            return function () {
                 var convert = function (digit) {
                    return A2($Maybe.withDefault,
                    -1,
                    $Result.toMaybe($String.toInt(digit)));
                 };
                 var pointIndexes$ = A2($List.filter,
                 function (y) {
                    return !_U.eq(y,-1);
                 },
                 A2($List.map,
                 function (x) {
                    return convert(x);
                 },
                 A2($String.split,
                 ",",
                 action._0)));
                 var sevenSegmentSample$ = appState.sevenSegmentSample;
                 var properties$ = sevenSegmentSample$.properties;
                 return _U.replace([["sevenSegmentSample"
                                    ,_U.replace([["properties"
                                                 ,_U.replace([["pointIndexes"
                                                              ,pointIndexes$]],
                                                 properties$)]
                                                ,["pointIndexesText"
                                                 ,action._0]],
                                    sevenSegmentSample$)]],
                 appState);
              }();
            case "SeventSegmentTextChange":
            return function () {
                 var sevenSegmentSample$ = appState.sevenSegmentSample;
                 var properties$ = sevenSegmentSample$.properties;
                 return _U.replace([["sevenSegmentSample"
                                    ,_U.replace([["properties"
                                                 ,_U.replace([["digits"
                                                              ,action._0]],
                                                 properties$)]],
                                    sevenSegmentSample$)]],
                 appState);
              }();
            case "SimulatedAnalogMeterValueChange":
            return function () {
                 var simulatedAnalogMeterSample$ = appState.simulatedAnalogMeterSample;
                 var properties$ = simulatedAnalogMeterSample$.properties;
                 return _U.replace([["simulatedAnalogMeterSample"
                                    ,_U.replace([["properties"
                                                 ,_U.replace([["currentValue"
                                                              ,convertToInt(action._0)]],
                                                 properties$)]],
                                    simulatedAnalogMeterSample$)]],
                 appState);
              }();}
         _U.badCase($moduleName,
         "between lines 87 and 114");
      }();
   });
   var SimulatedAnalogMeterValueChange = function (a) {
      return {ctor: "SimulatedAnalogMeterValueChange"
             ,_0: a};
   };
   var simulatedAnalogMeterView = F2(function (address,
   sample) {
      return function () {
         var properties = sample.properties;
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.style(_L.fromArray([sample.isVisible ? {ctor: "_Tuple2"
                                                                               ,_0: ""
                                                                               ,_1: ""} : {ctor: "_Tuple2"
                                                                                          ,_0: "display"
                                                                                          ,_1: "none"}]))]),
         _L.fromArray([A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("SIMULATED ANALOG METER VIEW")]))
                      ,A2($Html.div,
                      _L.fromArray([$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                         ,_0: "width"
                                                                         ,_1: "400px"}
                                                                        ,{ctor: "_Tuple2"
                                                                         ,_0: "height"
                                                                         ,_1: "136px"}]))]),
                      _L.fromArray([A2($Html$Widgets.simulatedAnalogMeter,
                      sample.properties,
                      sample.style)]))
                      ,A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("VALUE")
                                   ,A2($Html.input,
                                   _L.fromArray([$Html$Attributes.type$("text")
                                                ,$Html$Attributes.value($Basics.toString(properties.currentValue))
                                                ,A3($Html$Events.on,
                                                "input",
                                                $Html$Events.targetValue,
                                                function ($) {
                                                   return $Signal.message(address)(SimulatedAnalogMeterValueChange($));
                                                })]),
                                   _L.fromArray([]))]))]));
      }();
   });
   var SegmentedBarGraphValueChange = function (a) {
      return {ctor: "SegmentedBarGraphValueChange"
             ,_0: a};
   };
   var segmentedBarGraphView = F2(function (address,
   segmentedBarGraphSample) {
      return function () {
         var properties = segmentedBarGraphSample.properties;
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.style(_L.fromArray([segmentedBarGraphSample.isVisible ? {ctor: "_Tuple2"
                                                                                                ,_0: ""
                                                                                                ,_1: ""} : {ctor: "_Tuple2"
                                                                                                           ,_0: "display"
                                                                                                           ,_1: "none"}]))]),
         _L.fromArray([A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("SEGMENTED BAR GRAPH SAMPLE")]))
                      ,A2($Html.div,
                      _L.fromArray([$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                         ,_0: "width"
                                                                         ,_1: "400px"}
                                                                        ,{ctor: "_Tuple2"
                                                                         ,_0: "height"
                                                                         ,_1: "68px"}]))]),
                      _L.fromArray([A2($Html$Widgets.segmentedBarGraph,
                      segmentedBarGraphSample.properties,
                      segmentedBarGraphSample.style)]))
                      ,A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("VALUE")
                                   ,A2($Html.input,
                                   _L.fromArray([$Html$Attributes.type$("text")
                                                ,$Html$Attributes.value($Basics.toString(properties.currentValue))
                                                ,A3($Html$Events.on,
                                                "input",
                                                $Html$Events.targetValue,
                                                function ($) {
                                                   return $Signal.message(address)(SegmentedBarGraphValueChange($));
                                                })]),
                                   _L.fromArray([]))]))]));
      }();
   });
   var SeventSegmentColonsChange = function (a) {
      return {ctor: "SeventSegmentColonsChange"
             ,_0: a};
   };
   var SeventSegmentPointsChange = function (a) {
      return {ctor: "SeventSegmentPointsChange"
             ,_0: a};
   };
   var SeventSegmentTextChange = function (a) {
      return {ctor: "SeventSegmentTextChange"
             ,_0: a};
   };
   var sevenSegmentSampleView = F2(function (address,
   sevenSegmentSample$) {
      return function () {
         var properties = sevenSegmentSample$.properties;
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.style(_L.fromArray([sevenSegmentSample$.isVisible ? {ctor: "_Tuple2"
                                                                                            ,_0: ""
                                                                                            ,_1: ""} : {ctor: "_Tuple2"
                                                                                                       ,_0: "display"
                                                                                                       ,_1: "none"}]))]),
         _L.fromArray([A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("SEVENT SEGMENT EXAMPLE")]))
                      ,A2($Html.div,
                      _L.fromArray([$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                         ,_0: "width"
                                                                         ,_1: "400px"}
                                                                        ,{ctor: "_Tuple2"
                                                                         ,_0: "height"
                                                                         ,_1: "68px"}]))]),
                      _L.fromArray([A2($Html$Widgets.sevenSegment,
                      sevenSegmentSample$.properties,
                      sevenSegmentSample$.style)]))
                      ,A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("TEXT")
                                   ,A2($Html.input,
                                   _L.fromArray([$Html$Attributes.type$("text")
                                                ,$Html$Attributes.value(properties.digits)
                                                ,A3($Html$Events.on,
                                                "input",
                                                $Html$Events.targetValue,
                                                function ($) {
                                                   return $Signal.message(address)(SeventSegmentTextChange($));
                                                })]),
                                   _L.fromArray([]))]))
                      ,A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("POINTS")
                                   ,A2($Html.input,
                                   _L.fromArray([$Html$Attributes.type$("text")
                                                ,$Html$Attributes.value(sevenSegmentSample$.pointIndexesText)
                                                ,A3($Html$Events.on,
                                                "input",
                                                $Html$Events.targetValue,
                                                function ($) {
                                                   return $Signal.message(address)(SeventSegmentPointsChange($));
                                                })]),
                                   _L.fromArray([]))]))
                      ,A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("COLONS")
                                   ,A2($Html.input,
                                   _L.fromArray([$Html$Attributes.type$("text")
                                                ,$Html$Attributes.value(sevenSegmentSample$.colonIndexesText)
                                                ,A3($Html$Events.on,
                                                "input",
                                                $Html$Events.targetValue,
                                                function ($) {
                                                   return $Signal.message(address)(SeventSegmentColonsChange($));
                                                })]),
                                   _L.fromArray([]))]))]));
      }();
   });
   var appView = F3(function (address,
   appState,
   _v6) {
      return function () {
         switch (_v6.ctor)
         {case "_Tuple2":
            return A2($Html.toElement,
              _v6._0,
              _v6._1)(A2($Html.div,
              _L.fromArray([]),
              _L.fromArray([A2(sevenSegmentSampleView,
                           address,
                           appState.sevenSegmentSample)
                           ,A2(segmentedBarGraphView,
                           address,
                           appState.segmentedBarGraphSample)
                           ,A2(simulatedAnalogMeterView,
                           address,
                           appState.simulatedAnalogMeterSample)
                           ,A2(knobView,
                           address,
                           appState.knobSample)])));}
         _U.badCase($moduleName,
         "between lines 137 and 140");
      }();
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var mergedActions = $Signal.mergeMany(_L.fromArray([actions.signal]));
   var defaultKnobSample = {_: {}
                           ,isVisible: true
                           ,properties: $Html$Widgets.defaultKnobProperties
                           ,style: $Html$Widgets.defaultKnobStyle};
   var defaultSimulatedAnalogMeterSample = {_: {}
                                           ,isVisible: false
                                           ,properties: $Html$Widgets.defaultSimulatedAnalogMeterProperties
                                           ,style: $Html$Widgets.defaultSimulatedAnalogMeterStyle};
   var defaultSegmentedBarGraphSample = {_: {}
                                        ,isVisible: false
                                        ,properties: $Html$Widgets.defaultSegmentedBarGraphProperties
                                        ,style: $Html$Widgets.defaultSegmentBarGraphStyle};
   var defaultSevenSegmentSample = {_: {}
                                   ,colonIndexesText: A2($String.join,
                                   ",",
                                   A2($List.map,
                                   function (i) {
                                      return $Basics.toString(i);
                                   },
                                   $Html$Widgets.defaultSevenSegmentProperties.colonIndexes))
                                   ,isVisible: true
                                   ,pointIndexesText: A2($String.join,
                                   ",",
                                   A2($List.map,
                                   function (i) {
                                      return $Basics.toString(i);
                                   },
                                   $Html$Widgets.defaultSevenSegmentProperties.pointIndexes))
                                   ,properties: $Html$Widgets.defaultSevenSegmentProperties
                                   ,style: $Html$Widgets.defaultSevenSegmentStyle};
   var defaultAppState = {_: {}
                         ,knobSample: defaultKnobSample
                         ,segmentedBarGraphSample: defaultSegmentedBarGraphSample
                         ,sevenSegmentSample: defaultSevenSegmentSample
                         ,simulatedAnalogMeterSample: defaultSimulatedAnalogMeterSample};
   var appState = A3($Signal.foldp,
   update,
   defaultAppState,
   mergedActions);
   var main = A3($Signal.map2,
   appView(actions.address),
   appState,
   $Window.dimensions);
   var KnobSample = F3(function (a,
   b,
   c) {
      return {_: {}
             ,isVisible: a
             ,properties: b
             ,style: c};
   });
   var SimulatedAnalogMeterSample = F3(function (a,
   b,
   c) {
      return {_: {}
             ,isVisible: a
             ,properties: b
             ,style: c};
   });
   var SegmentedBarGraphSample = F3(function (a,
   b,
   c) {
      return {_: {}
             ,isVisible: a
             ,properties: b
             ,style: c};
   });
   var SevenSegmentSample = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,colonIndexesText: e
             ,isVisible: c
             ,pointIndexesText: d
             ,properties: a
             ,style: b};
   });
   var AppState = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,knobSample: d
             ,segmentedBarGraphSample: b
             ,sevenSegmentSample: a
             ,simulatedAnalogMeterSample: c};
   });
   _elm.Example.Main.values = {_op: _op
                              ,AppState: AppState
                              ,SevenSegmentSample: SevenSegmentSample
                              ,SegmentedBarGraphSample: SegmentedBarGraphSample
                              ,SimulatedAnalogMeterSample: SimulatedAnalogMeterSample
                              ,KnobSample: KnobSample
                              ,defaultAppState: defaultAppState
                              ,defaultSevenSegmentSample: defaultSevenSegmentSample
                              ,defaultSegmentedBarGraphSample: defaultSegmentedBarGraphSample
                              ,defaultSimulatedAnalogMeterSample: defaultSimulatedAnalogMeterSample
                              ,defaultKnobSample: defaultKnobSample
                              ,NoOp: NoOp
                              ,SeventSegmentTextChange: SeventSegmentTextChange
                              ,SeventSegmentPointsChange: SeventSegmentPointsChange
                              ,SeventSegmentColonsChange: SeventSegmentColonsChange
                              ,SegmentedBarGraphValueChange: SegmentedBarGraphValueChange
                              ,SimulatedAnalogMeterValueChange: SimulatedAnalogMeterValueChange
                              ,update: update
                              ,main: main
                              ,appState: appState
                              ,actions: actions
                              ,mergedActions: mergedActions
                              ,appView: appView
                              ,sevenSegmentSampleView: sevenSegmentSampleView
                              ,segmentedBarGraphView: segmentedBarGraphView
                              ,simulatedAnalogMeterView: simulatedAnalogMeterView
                              ,knobView: knobView
                              ,convertToInt: convertToInt};
   return _elm.Example.Main.values;
};